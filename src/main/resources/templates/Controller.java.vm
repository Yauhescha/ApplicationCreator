### Repository.java.vm
#set($entityName = $class.getSimpleName())
package generated.controller;

import ${class.getCanonicalName()};
import generated.model.${entityName};
import generated.service.${entityName}Service;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.stereotype.Controller;


@Controller
@RequiredArgsConstructor
@RequestMapping(${entityName}Controller.CURRENT_ADDRESS)
public class ${entityName}Controller {
    public static final String API_PATH = "${entityName.toLowerCase()}";
    public static final String CURRENT_ADDRESS = "/" + API_PATH;
    public static final String MESSAGE = "message" ;
    public static final String THYMELEAF_TEMPLATE_ALL_ITEMS_PAGE = API_PATH;
    public static final String THYMELEAF_TEMPLATE_ONE_ITEM_PAGE = THYMELEAF_TEMPLATE_ALL_ITEMS_PAGE + "-one" ;
    public static final String THYMELEAF_TEMPLATE_EDIT_PAGE = THYMELEAF_TEMPLATE_ALL_ITEMS_PAGE + "-edit" ;
    public static final String REDIRECT_TO_ALL_ITEMS = "redirect:" + CURRENT_ADDRESS;

    private final ${entityName}Service service;

    #foreach($field in ${class.getDeclaredFields()})
        #set($fieldType = $field.getType().getSimpleName())
        #set($fieldTypeFull = $field.getType().getName())
        #if(${fieldType.equals("List")} || ${fieldType.equals("Set")})
            #set($paramType = ${field.getGenericType().toString().replaceAll(".*<(.*?)>", "$1")})
            #set($fieldTypeSmall = ${paramType.substring(${paramType.lastIndexOf(".")})})
            #set($fieldTypeSmall = ${fieldTypeSmall.replace(".", "")})
            #set($lowerCase = $fieldTypeSmall.substring(0,1).toLowerCase() + $fieldTypeSmall.substring(1))
                #if(${paramType.contains("java.")})
                #else
                    private final ${fieldTypeSmall}Service ${lowerCase}Service;
                #end
        #elseif(${fieldTypeFull.contains("java.")})
        #else
            #set($fieldTypeSmall = $fieldType.replace(".*.", ""))
            #set($lowerCase = $fieldTypeSmall.substring(0,1).toLowerCase() + $fieldTypeSmall.substring(1))
            private final ${fieldType}Service ${lowerCase}Service;
        #end
    #end

    @GetMapping
    public String readAll(Model model) {
        model.addAttribute("list", service.readAll());
        return THYMELEAF_TEMPLATE_ALL_ITEMS_PAGE;
    }

    @GetMapping("/{id}")
    public String read(@PathVariable("id") Long id, Model model) {
        model.addAttribute("entity", service.read(id));
        return THYMELEAF_TEMPLATE_ONE_ITEM_PAGE;
    }

    @GetMapping(path = {"/edit", "/edit/{id}"})
    public String editPage(Model model, @PathVariable(name = "id", required = false) Long id) {
        if (id == null) {
            model.addAttribute("entity", new ${entityName}());
        } else {
            model.addAttribute("entity", service.read(id));
        }

        #foreach($field in ${class.getDeclaredFields()})
            #set($fieldType = $field.getType().getSimpleName())
            #set($fieldTypeFull = $field.getType().getName())
            #if(${fieldType.equals("List")} || ${fieldType.equals("Set")})
                #set($paramType = ${field.getGenericType().toString().replaceAll(".*<(.*?)>", "$1")})
                #set($fieldTypeSmall = ${paramType.substring(${paramType.lastIndexOf(".")})})
                #set($fieldTypeSmall = ${fieldTypeSmall.replace(".", "")})
                #set($lowerCase = $fieldTypeSmall.substring(0,1).toLowerCase() + $fieldTypeSmall.substring(1))
                #if(${paramType.contains("java.")})
                #else
                    model.addAttribute("${lowerCase}", ${lowerCase}Service.readAll());
                #end
            #elseif(${fieldTypeFull.contains("java.")})
            #else
                #set($fieldTypeSmall = $fieldType.replace(".*.", ""))
                #set($lowerCase = $fieldTypeSmall.substring(0,1).toLowerCase() + $fieldTypeSmall.substring(1))
                model.addAttribute("${lowerCase}_list", ${lowerCase}Service.readAll());
            #end
        #end

        return THYMELEAF_TEMPLATE_EDIT_PAGE;
    }

    @PostMapping
    public String save(@ModelAttribute ${entityName} entity, RedirectAttributes ra) {
        if (entity.getId() == null) {
            try {
                ${entityName} createdEntity = service.create(entity);
                ra.addFlashAttribute(MESSAGE, "Creating is successful");
                return REDIRECT_TO_ALL_ITEMS + "/" + createdEntity.getId();
            } catch (Exception e) {
                ra.addFlashAttribute(MESSAGE, "Creating failed");
                e.printStackTrace();
            }
            return REDIRECT_TO_ALL_ITEMS;
        } else {
            try {
                service.update(entity.getId(), entity);
                ra.addFlashAttribute(MESSAGE, "Editing is successful");
            } catch (Exception e) {
                e.printStackTrace();
                ra.addFlashAttribute(MESSAGE, "Editing failed");
            }
            return REDIRECT_TO_ALL_ITEMS + "/" + entity.getId();
        }
    }

    @GetMapping("/{id}/delete")
    public String delete(@PathVariable Long id, RedirectAttributes ra) {
        try {
            service.delete(id);
            ra.addFlashAttribute(MESSAGE, "Removing is successful");
        } catch (Exception e) {
            e.printStackTrace();
            ra.addFlashAttribute(MESSAGE, "Removing failed");
        }
        return REDIRECT_TO_ALL_ITEMS;
    }
}
